/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package spotifei.view;

import java.awt.Color;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import spotifei.app.Sessao;
import spotifei.controller.HistoricoController;
import spotifei.controller.MusicaController;
import spotifei.model.Musica;

/**
 * Painel responsável por exibir a interface de busca de músicas.
 * 
 * Este painel permite que o usuário:
 * <ul>
 *   <li>Pesquise músicas pelo título.</li>
 *   <li>Visualize os resultados dinamicamente conforme a busca.</li>
 *   <li>Acesse o histórico de buscas anteriores.</li>
 * </ul>
 * 
 * A interação com o sistema é feita por meio dos controllers {@link MusicaController}
 * e {@link HistoricoController}.
 */
public class BuscaMusicasPanel extends javax.swing.JPanel {

    private MusicaController musicaController;
    private HistoricoController historicoController;
    private JPopupMenu popupHistorico;
    
    /**
     * Construtor do painel de busca de músicas.
     * Inicializa os componentes visuais e carrega a lista inicial de músicas.
     * 
     * @param musicaController controlador responsável pelas ações de música
     * @param historicoController controlador responsável pelas ações do histórico
     */
    public BuscaMusicasPanel(MusicaController musicaController, HistoricoController historicoController) {
        initComponents();
        popupHistorico = new JPopupMenu();
        
        this.musicaController = musicaController;
        this.historicoController = historicoController;
        
        musicaController.setBuscaMusicasView(this);
        historicoController.setView(this);
        
        // LISTA TODAS AS MUSICAS INICIALMENTE
        musicaController.listarMusicasPesquisa("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSuperiorBusca = new javax.swing.JPanel();
        btnHistoricoPesquisa = new javax.swing.JButton();
        txtBuscarMusicas = new javax.swing.JTextField();
        btnBuscarMusicas = new javax.swing.JButton();
        pnlResultadosBusca = new javax.swing.JScrollPane();
        pnlListaMusicas = new javax.swing.JPanel();

        setBackground(new java.awt.Color(44, 44, 44));
        setMinimumSize(new java.awt.Dimension(850, 768));
        setPreferredSize(new java.awt.Dimension(850, 768));
        setLayout(new java.awt.BorderLayout());

        pnlSuperiorBusca.setBackground(new java.awt.Color(44, 44, 44));
        pnlSuperiorBusca.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 10));

        btnHistoricoPesquisa.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnHistoricoPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/historyIcon.png"))); // NOI18N
        btnHistoricoPesquisa.setToolTipText("Histórico");
        btnHistoricoPesquisa.setBorderPainted(false);
        btnHistoricoPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoricoPesquisaActionPerformed(evt);
            }
        });
        pnlSuperiorBusca.add(btnHistoricoPesquisa);

        txtBuscarMusicas.setColumns(25);
        txtBuscarMusicas.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        txtBuscarMusicas.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarMusicas.setText("Pesquisar...");
        txtBuscarMusicas.setToolTipText("");
        txtBuscarMusicas.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtBuscarMusicas.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        txtBuscarMusicas.setMinimumSize(new java.awt.Dimension(15, 40));
        txtBuscarMusicas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarMusicasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarMusicasFocusLost(evt);
            }
        });
        pnlSuperiorBusca.add(txtBuscarMusicas);

        btnBuscarMusicas.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnBuscarMusicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/searchIcon.png"))); // NOI18N
        btnBuscarMusicas.setToolTipText("Pesquisar");
        btnBuscarMusicas.setBorderPainted(false);
        btnBuscarMusicas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMusicasActionPerformed(evt);
            }
        });
        pnlSuperiorBusca.add(btnBuscarMusicas);

        add(pnlSuperiorBusca, java.awt.BorderLayout.PAGE_START);

        pnlListaMusicas.setBackground(new java.awt.Color(55, 55, 55));
        pnlListaMusicas.setLayout(new javax.swing.BoxLayout(pnlListaMusicas, javax.swing.BoxLayout.Y_AXIS));
        pnlResultadosBusca.setViewportView(pnlListaMusicas);

        add(pnlResultadosBusca, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento disparado ao clicar no botão de busca.
     * Executa a pesquisa da música e adiciona ao histórico.
     * 
     * @param evt evento de clique do botão
     */
    private void btnBuscarMusicasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMusicasActionPerformed
        String textoPesquisa = txtBuscarMusicas.getText();
        
        musicaController.listarMusicasPesquisa(textoPesquisa);
        historicoController.adicionarPesquisa(Sessao.getUsuarioLogado(), textoPesquisa);
    }//GEN-LAST:event_btnBuscarMusicasActionPerformed

    /**
     * Evento disparado ao focar no campo de texto da busca.
     * Remove o placeholder se estiver presente.
     * 
     * @param evt evento de foco ganho
     */
    private void txtBuscarMusicasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarMusicasFocusGained
        // RETIRAR PLACEHOLDER
        if (txtBuscarMusicas.getText().equals("Pesquisar...")) {
            txtBuscarMusicas.setText("");
            txtBuscarMusicas.setForeground(new Color(204,204,204));
        }
    }//GEN-LAST:event_txtBuscarMusicasFocusGained

    /**
     * Evento disparado ao perder o foco do campo de texto.
     * Reaplica o placeholder caso o campo esteja vazio.
     * 
     * @param evt evento de foco perdido
     */
    private void txtBuscarMusicasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarMusicasFocusLost
        // ADICIONAR PLACEHOLDER
        if (txtBuscarMusicas.getText().equals("")) {
            txtBuscarMusicas.setText("Pesquisar...");
            txtBuscarMusicas.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_txtBuscarMusicasFocusLost

    /**
     * Evento acionado ao clicar no botão de histórico de pesquisa.
     * Solicita ao controlador que exiba o histórico do usuário atual.
     * 
     * @param evt evento de clique no botão
     */
    private void btnHistoricoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoricoPesquisaActionPerformed
        historicoController.buscarExibirHistorico(Sessao.getUsuarioLogado());
    }//GEN-LAST:event_btnHistoricoPesquisaActionPerformed

    /**
     * Atualiza a lista de músicas exibidas na interface com base em uma nova busca.
     * 
     * @param listaMusicas lista de músicas que será exibida no painel
     */
    public void atualizarListaMusicas(List<Musica> listaMusicas) {
        pnlListaMusicas.removeAll();

        for (Musica musica : listaMusicas) {
            MusicaItemPanel item = new MusicaItemPanel(musica);   

            pnlListaMusicas.add(item);
        }

        pnlListaMusicas.revalidate();
        pnlListaMusicas.repaint();
    }

    /**
     * Exibe um menu popup com o histórico de buscas do usuário.
     * Cada item do menu, ao ser clicado, insere a busca correspondente no campo de texto.
     * 
     * @param historico lista de termos buscados anteriormente
     */
    public void exibirHistorico(List<String> historico) {
        
        popupHistorico.removeAll();
        
        for (String pesquisa : historico) {
            JMenuItem item = new JMenuItem(pesquisa);
            
            item.addActionListener(e -> {
                txtBuscarMusicas.setText(pesquisa);
                popupHistorico.setVisible(false);
            });
            
            popupHistorico.add(item);
        }
        
        popupHistorico.show(txtBuscarMusicas, 0, txtBuscarMusicas.getHeight());
    }   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarMusicas;
    private javax.swing.JButton btnHistoricoPesquisa;
    private javax.swing.JPanel pnlListaMusicas;
    private javax.swing.JScrollPane pnlResultadosBusca;
    private javax.swing.JPanel pnlSuperiorBusca;
    private javax.swing.JTextField txtBuscarMusicas;
    // End of variables declaration//GEN-END:variables
}
